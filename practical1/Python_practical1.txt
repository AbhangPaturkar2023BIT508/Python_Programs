Script started on 2024-07-21 18:06:26+05:30 [TERM="xterm-256color" TTY="/dev/pts/4" COLUMNS="80" LINES="24"]
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ pyhtoKthon3
Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
K>>>HaJ=>10
>>> a
10
>>> type(a)
<class 'int'>
>>> a = 0b10
>>> a
2
>>> a = K0xa
>>> a
10
>>> a = 0O999
  File "<stdin>", line 1
    a = 0O999
	  ^
SyntaxError: invalid digit '9' in octal literal
>>> a = 0O99K777
>>> a
511
CCCCCK==00xKA
>>> a
10
>>> Kbin(5)
'0b101'
>>> bi111Poct(5)
'0o5'
>>> hexK(5)
'0x5'
CCCCoct(1P9)
'0o11'
>>> oct(1P15)
'0o17'
>>> oct(11P0)
'0o12'
>>> oct(11P)
'0o1'
>>> oct(1P11)
'0o13'
>>> oc111Phex(11)
'0xb'
>>> hex(11P5)
'0xf'
CCCCabin(1P0x15)
'0b10101'
>>> bin(0x111Pf)
'0b1111'
>>>  oct(0xFace)
  File "<stdin>", line 1
    oct(0xFace)
IndentationError: unexpected indent
CCCC1Poct(0xFace)
'0o175316'
>>> KsKaKa = 123.123
>>> a = 123.12K 0b101.010
  File "<stdin>", line 1
    a = 0b101.010
	     ^^^^
SyntaxError: invalid syntax
K>>>aa==01.2e501K
>>> a
120000.0
>>> Ka = 1e2
>>> a
100.0
>>> aC==11e-2
>>> a
0.01
>>> a = 1e1P+2
>>> a
100.0
>>> a = 10 + 20.2j
>>> a
(10+20.2j)
CCCCCK==110++220.11Pj
>>> a
(10+20j)
>>> type(a)
<class 'complex'>
>>> a
(10+20j)
>>> b = 10 + 20 j
  File "<stdin>", line 1
    b = 10 + 20 j
		^
SyntaxError: invalid syntax
>>> a
(10+20j)
>>> b = 10 + 201Pj
>>> b
(10+20j)
>>> a+b
(20+40j)
>>> 2Pb = 10 + 20K
>>> Kb
30
>>> b = 101@j20
>>> n
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'n' is not defined
>>> b
(20+10j)
>>> b = 101P1@i0
  File "<stdin>", line 1
    b = 10i + 20
	 ^
SyntaxError: invalid decimal literal
>>> b = 10i11P1PjC-220
>>> b
(-20+10j)
>>> C = 10j - 2Cj
>>> b
-10j
>>> b = 101P- 20j
>>> b
(10-20j)
>>> b
(10-20j)
>>> =b
  File "<stdin>", line 1
    =b
    ^
SyntaxError: invalid syntax
>>> b
(10-20j)
>>> b+10
(20-20j)
>>> b
(10-20j)
>>>				     Kb.real
10.0
>>> a.real
10.0
>>> aKb.KimagKinar
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'complex' object has no attribute 'imaginar'
>>> b.imaginary
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'complex' object has no attribute 'imaginary'
>>> b.imaginarK
-20.0
>>> KTrue+KTrue
2
>>> TrK2*True
2
>>> rKagKnge(Tri11Pue,)11)
range(1, 11)
>>> True/false
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'false' is not defined. Did you mean: 'False'?
>>> True/1P1PFalse
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> K Ka = "Ab1Phang"
>>> a[0]
'A'
>>> a[1P5]
'g'
>>> a[5:]
'g'
>>> a[5:0]
''
>>> a[1PC11P-1]
'g'
>>> a[-1:]
'g'
>>> a[-11PCKa[-1:0]
''
CCCCKa[-111P[:-1]
'Abhan'
>>> a[:-11P]
'Abhang'
>>> a[:0]
''
>>> a[:1P10C1P4:2]
'Ah'
>>> a[0:1P-1C0C1P-1]
'gnahb'
>>> a[-1:1P:-1]
'gnahbA'
>>> a[-1P::-1]
  File "<stdin>", line 1
    a[-::-1]
       ^
SyntaxError: invalid syntax
>>> a[1P::-1]
'gnahbA'
>>> a[::-1111P10]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
>>> Klen(a)
6
CCCC1Pa[-::-11111P1:5]
'bhan'
CCCCa[1P0:5]
'Abhan'
>>> a[0:1P6]
'Abhang'
>>> a[0:6:2]
'Ahn'
>>> a[0:6:2:1]
  File "<stdin>", line 1
    a[0:6:2:1]
	   ^
SyntaxError: invalid syntax
>>> a[0:6:2:11111P]
'Abhang'
>>> a[1PC6]
'Abhang'
>>> a[:1P5]
'Abhan'
>>> a[:11P-1:]
'g'
>>> a[-1:-1P4]
''
>>> a[-1:1P4:-1]
'han'
>>> a[-4:-1:-1]
''
>>> a[-4:-11P1:-4:-1]
'gna'
>>> a[-1:-4:-1111P1:100]
'bhang'
>>> a[-4:-1:-1Ka
'Abhang'
>>> b= 0
>>> d = 5
>>> a[b:dK]
'Abhan'
CCCC1P1PaK[-1:-4:-11111111P0::-1]
'A'
>>> a[0::-11P10]
'A'
>>> a[0::1111P6]
'Abhang'
>>> a[0:6:0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: slice step cannot be zero
>>> H2J>>> a
'Abhang'
>>> a[-1:-3]
''
>>> a[-1:-1P6]
''
>>> a[-11P01PCC:-1]
''
CCCCCK[0:6:0]P:-1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: slice step cannot be zero
>>> a[0:1P1P6C0C1P-1]
'gnahb'
>>> a[6:1P-1:-1]
''
>>> a[6:-11P0:-1]
'gnahb'
>>> a[6:1P:-1]
'gnahbA'
>>> a[1P::-1]
'gnahbA'
>>> a[::-11P]
'Abhang'
>>> a[::Ka = intpKput("Enter"a"name:C")
Enter a name: Abhang
>>> Kb = a[K::-1K]
>>> b
'gnahbA'
>>> a
'Abhang'
>>> b = a[a11Plen(a)::-1]
>>> b
'gnahbA'
>>> a
'Abhang'
>>> a*10
'AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang'
>>> a*10_
  File "<stdin>", line 1
    a*10_
	^
SyntaxError: invalid decimal literal
>>> aC_*10
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a_' is not defined. Did you mean: 'a'?
>>> a+_*10
'AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang'
>>> a+1P1P"_"*10
'Abhang__________'
CCCCCCCC1111PCCC
'AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang'
>>> a*10+"_"
'AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_'
>>> _
'AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_'
>>> a+_*10
'AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_AbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhangAbhang_'
>>> int(5.5)
5
>>> in111Pbol11Pol(5.5)
True
>>> bool(5.111P-5.2)
True
>>> bool(-5.1111P0)
False
>>> 1&1
1
>>> 1&K0&5
0
>>> 1P5&5
5
>>> 51Pand5
  File "<stdin>", line 1
    5and5
    ^
SyntaxError: invalid decimal literal
>>> inKt(10+10j)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'complex'
CCCCCCoat(10+10j)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: float() argument must be a string or a real number, not 'complex'
CCCCCCr(10+10j)+10j)
'(10+10j)'
CCCCCCol(10+10j)
True
>>> bool(10+111111P0+0j)
False
>>> bool(0+1P1j)
True
>>> bool(0C1P0+j)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'j' is not defined
>>> bool(1P1+0j)
True
>>> intK("10")
10
>>> int("10a")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '10a'
>>> dec("0b111")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'dec' is not defined
>>> dec("1P(1P0b111)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'dec' is not defined
>>> dec(0b1111111PKbiKdec("01PCCCCCK H2J>>> 1PCCCC10.2)
10
>>> int(10.1111P0b121)
  File "<stdin>", line 1
    int(0b121)
	   ^
SyntaxError: invalid digit '2' in binary literal
>>> int(0b11P01)
5
>>> int(01Px101)
257
>>> int(01Pb101)
5
>>> intC"0b101")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '0b101'
>>> deKc(0b101)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'dec' is not defined
>>> compleKx(10)
(10+0j)
>>> complex(10j)
10j
>>> complex(10jKa = 10j
>>> a
10j
>>> type(a)
<class 'complex'>
>>> 0+10j
10j
CCCCcomplex(10111P101P)
(10+0j)
>>> complex(10.23)
(10.23+0j)
>>> complex(10.211111P0b111)
(7+0j)
>>> complex("0b111")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: complex() arg is a malformed string
>>> complex("0b11P0x111)
(273+0j)
>>> complex(0x111,)10)
(273+10j)
>>> complex(0x111, 10,)5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: complex() takes at most 2 arguments (3 given)
>>> complex(0x111, 10, 111PKint("10")
10
CCCCbin("10")0")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object cannot be interpreted as an integer
CCCCcomplex(0x111,"1"10")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: complex() second arg can't be a string
>>> complex(0x1111111P1@11@2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: complex() second arg can't be a string
>>> complex(12, "11@"0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: complex() can't take second arg if first is a string
>>> complex("12",11P11P1P10j")
10j
>>> bool
<class 'bool'>
>>> bool("""")
True
>>> bool(" 11P")
False
>>> eixKxit()
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ eixKxit
exit4l

Script done on 2024-07-21 22:21:25+05:30 [COMMAND_EXIT_CODE="0"]
Script started on 2024-07-25 18:49:10+05:30 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ python3
Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ eixKxit
exit4l

Script done on 2024-07-25 18:49:25+05:30 [COMMAND_EXIT_CODE="0"]
Script started on 2024-07-25 18:50:04+05:30 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ python3
Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> exoKit()
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ abhang
Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
K>>> exit()
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ Kexit
exit4l

Script done on 2024-07-25 19:16:19+05:30 [COMMAND_EXIT_CODE="0"]
Script started on 2024-07-25 19:20:30+05:30 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="190" LINES="35"]
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ pKabhabKng
Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> absK(5)
5
>>> abs(-5)
5
>>> abs(-5.25)
5.25
>>> abs(-5.25+10j)
11.294356998076518
>>> abs(-5.21111P10+10j)
14.142135623730951
>>> all([0,1,2])
False
>>> all([1P5,1,2])
True
>>> all([5,1,11111P"",]"aC,"b"])
False
>>> all(["1@d"a","b"])
True
CCCCCCCCC6P-5,1,2])CCCCC
True
>>> all([-1P0,1,2])
False
CCCCKall([,1,1111P])1,2])
True
>>> all([])
True
>>> al11Pny([])
False
>>> any([1,2,3])
True
>>> any([1,2,1P0,0])
True
>>> any([1P0,0,0])
False
>>> ascii("abah111Phang")
"'abhang'"
>>> ascii("abhang\npatu1Pra11Pkar")
"'abhang\\npaturkar'"
>>> ascii("abhang\npaturkar12")
"'abhang\\npaturkar12'"
CCCCKbinK(10)hang\npaturkar12")
'0b1010'
>>> bin(-10)
'-0b1010'
>>> bin(-1P0)
'0b0'
>>> bin(-0.2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'float' object cannot be interpreted as an integer
>>> bool(5>3)
True
>>> bool(5>111P0)
False
>>> bool(1P1)
True
>>> bool(-1)
True
>>> bool(-1.2)
True
>>> bool(1P1.2)
True
>>> bool("")
False
>>> bool(""")
True
>>> bytearKraKy([1,2,3])
bytearray(b'\x01\x02\x03')
>>> bytearra11111Ps([1,2,3])
b'\x01\x02\x03'
>>> chr(*11P97)
'a'
>>> chr(-97)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: chr() arg not in range(0x110000)
>>> chr(-9111P101)
'e'
>>> chr(10111P0)
'\x00'
>>> chr(11P(65)
'A'
>>> comKpleKx('+1P1.23')
(1.23+0j)
>>> complex('+1.211111P-4.5j')
-4.5j
>>> complex('-4.51P111111P1.23)
(1.23+0j)
>>> complex(1.21111P6j)
6j
>>> complex(611Prea1Pl)=)5)
(5+0j)
>>> complex(rea1111P1@i1@m1@a1@g
5j
>>> a = [1,2,31P]
>>> aKdKict(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: cannot convert dictionary update sequence element #0 to a sequence
>>> dict(one1P=)1)
{'one': 1}
>>> dict(one= 111111P1P[(one:1)])
  File "<stdin>", line 1
    dict([(one:1)])
	      ^
SyntaxError: invalid syntax
>>> dict([('one':1)])
  File "<stdin>", line 1
    dict([('one':1)])
		^
SyntaxError: invalid syntax
>>> dict([('one'111111Pin11P11Ponw,111Pem11P,11)])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'one' is not defined. Did you mean: 'None'?
>>> dict([(one11@'CCC1@'
{'one': 1}
>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'a']
>>> dir(a)
['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> a
[1, 2, 3]
>>> divmod(K10,4)
(2, 2)
CCCCCCCCCCCCCCCCCCCCC)
<class 'tuple'>
>>> FIKfiltKer((iCKdef fuKevenPrint(numC:
...	if 1@(CCCCCCCC = 0 :
  File "<stdin>", line 2
    if (num % 2) = 0 :
	^^^^^^^
SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?
CCCCdefyevenPrint(num):)::
CCCCdef ife(numn%(2)m== 0 :
...		returnK num
... KKq
  File "<stdin>", line 4
    q
    ^
SyntaxError: invalid syntax
>>> fileKlter(Ka
[1, 2, 3]
>>> hashCa)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
CCCCaKs=(tKupeKle(a)
>>> a
(1, 2, 3)
CCCC5Phash(a)(a)
529344067295497451
>>> help()

Welcome to Python 3.10's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the internet at https://docs.python.org/3.10/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".	Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> help(int)
No Python documentation found for 'help(int)'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> help(in111Pstr)
No Python documentation found for 'help(str)'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> help(st111Phex)
No Python documentation found for 'help(hex)'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> q

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
>>> helKp(hex)
Help9on2built-in function hex in module builtins:

1mhex0m(number, /)
    Return the hexadecimal representation of an integer.

    >>> hex(12648430)
    '0xc0ffee'
K?1l?1049l23;0;0t
>>> help(he111Pint)
Help9on2class?int in module builtins:

class 1mint0m(object)
 |  int([x]) -> integer
 |  int(x, base=10) -> integer
 |
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.	If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |
 |  If x is not a number or if base is given, then x must be a string,
 |  bytes, or bytearray instance representing an integer literal in the
 |  given base.	 The literal can be preceded by '+' or '-' and be surrounded
 |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
 |  Base 0 means to interpret the base from the string as an integer literal.
 |  >>> int('0b100', base=0)
 |  4
 |
 |  Built-in subclasses:
 |	bool
 |
 |  Methods defined here:
 |
 |  1m__abs__0m(self, /)
 |	abs(self)
 |
 |  1m__add__0m(self, value, /)
 |	Return self+value.
 |
 |  1m__and__0m(self, value, /)
 |	Return self&value.
 |
 |  1m__bool__0m(self, /)
 |	True if self else False
K?1l?1049l23;0;0t
>>>
>>> help(id)
Help9on2built-in function id in module builtins:

1mid0m(obj, /)
    Return the identity of an object.

    This is guaranteed to be unique among simultaneously existing objects.
    (CPython uses the object's memory address.)
K?1l?1049l23;0;0t
>>> hex(255)
'0xff'
>>> hex(-42)
'-0x2a'
>>> id(a)
135393451111232
>>> inKKputK("Ener1111Pnter"text":"")
Enter text : K10
'10'
>>> exit()
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ exit
exit4l

Script done on 2024-07-25 20:25:43+05:30 [COMMAND_EXIT_CODE="0"]
Script started on 2024-07-25 21:25:43+05:30 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="190" LINES="35"]
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ abhang
Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> int(12.45)
12
>>> int(12.411'123')
123
>>> int('12_3')
123
>>> int('12_311111P')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: ''
>>> int('11P)
0
>>> int('1PfaceC,16)
64206
>>> a
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined
>>> a = [1,2,3]
>>> KisKinstance(a,1Pk11Plist)
True
>>> isinstance(a,lis1111Ptup1Ple)
False
>>> issubclass(1Plist,)tuple)
False
>>> issubclass(list, tupl11111111111Pset,)frozenset)
False
>>> issubclass(set, frozense11111111111111Pint1P,)bol11Pol)
False
>>> issubclass(int, boo1111Pint)
True
>>> issubclass(int, in111111111P(frozens1Pet,)set)
False
>>> issubclass(frozenset, se11111111111111Pint,)float)
False
>>> issubclass(int, floa111111P)set)
False
>>> locals()
{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, 'a': [1, 2, 3]}
>>> Klen("Abhang")
6
>>> len("Abhang11111111P[1,2,2])
3
>>> jKmazKx('a','aa'1P,'')
'aa'
>>> max('a','aa','11111111111P[1,5,2])
5
>>> oct(8)
'0o10'
>>> oct(1P7)
'0o7'
>>> oct(1P-85)
'-0o125'
>>> file(Python.py)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'file' is not defined. Did you mean: 'filter'?
CCCCCCCC(Python.py))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Python' is not defined
>>> open('Python.py')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'Python.py'
>>> open('Python_pract11PCC111P.txt')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'Python_pract1.txt'
>>> ord
<built-in function ord>
>>> (KorC(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: ord() expected string of length 1, but list found
>>> ord('a')
97
>>> pow(1P2,5)
32
>>> pow(2,1Pa)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'list'
>>> pow(2,1P0)
1
>>> 2**2
4
>>> rKange(1,1P6,1P2)
range(1, 6, 2)
CCCCCCCCCCirinrCCCCCCCCCCCC)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'i' is not defined. Did you mean: 'id'?
CCCCCCCCCCCCCCCCCCCCC),6,2))
[1, 3, 5]
>>> list(range(1,C6,0,-2))
[16, 14, 12, 10, 8, 6, 4, 2]
>>> list(range(1P6,0,-2))
[6, 4, 2]
>>> list(range(12P,6,1P0))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: range() arg 3 must not be zero
>>> reversed([1,2,3])
<list_reverseiterator object at 0x711db5063850>
CCCCKareversed([1,2,3])
[1, 2, 3]
CCCCCCCCreversed(a)reversed(a)
>>> a
<list_reverseiterator object at 0x711db5063850>
>>> round(1.23)
1
>>> round(1.23,)1)
1.2
>>> a = "Aba11Phan1Pg"
>>> a[2:6K]
'hang'
>>> a[2:111P0:6:2]
'Ahn'
>>> a[0:6:11111P6:-1:-1]
''
>>> a[6:-11P0:-1]
'gnahb'
>>> a[6:1P:-1]
'gnahbA'
>>> a =K
'Abhang'
>>> sorKted(a)
['A', 'a', 'b', 'g', 'h', 'n']
>>> STRKstr(1)
'1'
>>> str(1PTrue)
'True'
>>> sum([1P'a',b'111P'b'])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> sum(['a','1P111111P1,2,3,4])
10
>>> vaKrs(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: vars() argument must have __dict__ attribute
CCCCKdirK()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'a']
>>> a
'Abhang'
>>> vars(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: vars() argument must have __dict__ attribute
>>> a = [1,2,3]
>>> vars(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: vars() argument must have __dict__ attribute
>>> vars(aKa = {1:'a'}
>>> a
{1: 'a'}
>>> vars(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: vars() argument must have __dict__ attribute
>>> exit()
?2004h0;abhang0709@abhang0709-HP: /media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical01;32mabhang0709@abhang0709-HP00m:01;34m/media/abhang0709/Ubuntu Volume/SGGS/Python_Programs/practical00m$ exit
exit4l

Script done on 2024-07-25 22:44:10+05:30 [COMMAND_EXIT_CODE="0"]
